<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\rvmdk\psu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\rvmdk\psu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Thu Nov 17 16:09:27 2016
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; verifyComand &rArr; GenerateVoltage &rArr; FillStructureI2C &rArr; AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SysCtlDelay</a><BR>
 <LI><a href="#[5c]">UARTCharPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">UARTCharPut</a><BR>
 <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[5]">GPRSUARTIntHandler</a> from uart_comm.o(i.GPRSUARTIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_rvmdk.o(RESET) referenced 116 times from startup_rvmdk.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_rvmdk.o(RESET) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">Timer1IntHandler</a> from timer_operations.o(i.Timer1IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[6]">Timer1IntHandler</a> from timer_operations.o(i.Timer1IntHandler) referenced from timer_operations.o(i.StartTimer1A)
 <LI><a href="#[7]">Timer2IntHandler</a> from timer_operations.o(i.Timer2IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">Timer3IntHandler</a> from timer_operations.o(i.Timer3IntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[8]">Timer3IntHandler</a> from timer_operations.o(i.Timer3IntHandler) referenced from timer_operations.o(i.StartTimer3A)
 <LI><a href="#[4]">UARTIntHandler</a> from uart_comm.o(i.UARTIntHandler) referenced from startup_rvmdk.o(RESET)
 <LI><a href="#[a]">_snputc</a> from printf1.o(i._snputc) referenced from printf1.o(i.__0snprintf$1)
 <LI><a href="#[9]">main</a> from main.o(i.main) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[6c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[f]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudo_8bit_cmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkTransfer
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThinkMeter
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandInformation
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_reboot
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMessage
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2IntHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPRSCommand
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWriteComplete
</UL>

<P><STRONG><a name="[6a]"></a>strcat</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
</UL>

<P><STRONG><a name="[68]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPRSCommand
</UL>

<P><STRONG><a name="[69]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[70]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>ADCIntClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADCIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTemperatureAdcModule
</UL>

<P><STRONG><a name="[46]"></a>ADCIntStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc.o(i.ADCIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
</UL>

<P><STRONG><a name="[45]"></a>ADCProcessorTrigger</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
</UL>

<P><STRONG><a name="[22]"></a>ADCSequenceConfigure</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTemperatureAdcModule
</UL>

<P><STRONG><a name="[47]"></a>ADCSequenceDataGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
</UL>

<P><STRONG><a name="[21]"></a>ADCSequenceDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceDisable))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTemperatureAdcModule
</UL>

<P><STRONG><a name="[24]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTemperatureAdcModule
</UL>

<P><STRONG><a name="[23]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTemperatureAdcModule
</UL>

<P><STRONG><a name="[11]"></a>AsciiToHex</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, utils.o(i.AsciiToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyStop
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStructurePWM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStructureI2C
</UL>

<P><STRONG><a name="[14]"></a>BlinkTransfer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, utils.o(i.BlinkTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BlinkTransfer &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThinkMeter
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUARTIntHandler
</UL>

<P><STRONG><a name="[18]"></a>BlinkWithTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, commands.o(i.BlinkWithTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BlinkWithTimer &rArr; StartTimer3A &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer3A
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1A
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[1b]"></a>CMD_reboot</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, commands.o(i.CMD_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMD_reboot &rArr; SysCtlClockGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlReset
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[1d]"></a>ConfigureI2CModule</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, i2c_comm.o(i.ConfigureI2CModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ConfigureI2CModule &rArr; GPIOPinTypeI2CSCL
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemPeripherals
</UL>

<P><STRONG><a name="[1f]"></a>ConfigureTemperatureAdcModule</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, adc_run.o(i.ConfigureTemperatureAdcModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ConfigureTemperatureAdcModule &rArr; ADCSequenceStepConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlADCSpeedSet
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDisable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemPeripherals
</UL>

<P><STRONG><a name="[26]"></a>ConfigureVoltageAdcModule</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, adc_run.o(i.ConfigureVoltageAdcModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ConfigureVoltageAdcModule &rArr; GPIOPinTypeADC
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlADCSpeedSet
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDisable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemPeripherals
</UL>

<P><STRONG><a name="[2c]"></a>DecimalToHex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, utils.o(i.DecimalToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DecimalToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDifferenceReading
</UL>

<P><STRONG><a name="[28]"></a>DisableAllTimers</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, commands.o(i.DisableAllTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableAllTimers
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[2a]"></a>DisablePwmPin</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pwm_gen.o(i.DisablePwmPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DisablePwmPin &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyStop
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>DoDifferenceReading</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, i2c_comm.o(i.DoDifferenceReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoDifferenceReading &rArr; lcdMessage &rArr; string &rArr; data
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAscii
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecimalToHex
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateVoltage
</UL>

<P><STRONG><a name="[12]"></a>EmergencyStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, commands.o(i.EmergencyStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePwmPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHex
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[64]"></a>EraseContainer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utils.o(i.EraseContainer))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>EraseGPRSContainer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utils.o(i.EraseGPRSContainer))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>FillStructureI2C</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, commands.o(i.FillStructureI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FillStructureI2C &rArr; AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp10
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateVoltage
</UL>

<P><STRONG><a name="[33]"></a>FillStructurePWM</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, commands.o(i.FillStructurePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FillStructurePWM &rArr; AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp10
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
</UL>

<P><STRONG><a name="[34]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
</UL>

<P><STRONG><a name="[35]"></a>GPIOPadConfigSet</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
</UL>

<P><STRONG><a name="[3e]"></a>GPIOPinConfigure</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPRSUart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebugUart
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemPeripherals
</UL>

<P><STRONG><a name="[27]"></a>GPIOPinTypeADC</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeADC
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
</UL>

<P><STRONG><a name="[15]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkTransfer
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePwmPin
</UL>

<P><STRONG><a name="[1e]"></a>GPIOPinTypeI2CSCL</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2CSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeI2CSCL
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureI2CModule
</UL>

<P><STRONG><a name="[36]"></a>GPIOPinTypeTimer</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPinTypeTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemPeripherals
</UL>

<P><STRONG><a name="[16]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkTransfer
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePwmPin
</UL>

<P><STRONG><a name="[5]"></a>GPRSUARTIntHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_comm.o(i.GPRSUARTIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPRSUARTIntHandler &rArr; BlinkTransfer &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>GeneratePWM</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, commands.o(i.GeneratePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GeneratePWM &rArr; FillStructurePWM &rArr; AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerMatchSet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStructurePWM
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyStop
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[3f]"></a>GenerateVoltage</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, i2c_comm.o(i.GenerateVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GenerateVoltage &rArr; FillStructureI2C &rArr; AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToThousand
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSlaveDac
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadSlaveDac
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDifferenceReading
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStructureI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[43]"></a>GetAdcVoltage</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, commands.o(i.GetAdcVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetAdcVoltage &rArr; GetVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerMatchSet
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[44]"></a>GetVoltage</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, adc_run.o(i.GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceDataGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntStatus
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
</UL>

<P><STRONG><a name="[2d]"></a>HexToAscii</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, utils.o(i.HexToAscii))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDifferenceReading
</UL>

<P><STRONG><a name="[42]"></a>HexToThousand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utils.o(i.HexToThousand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HexToThousand
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp10
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateVoltage
</UL>

<P><STRONG><a name="[48]"></a>HibernateEnableExpClk</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, hibernate.o(i.HibernateEnableExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWriteComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
</UL>

<P><STRONG><a name="[4a]"></a>HibernateGPIORetentionEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hibernate.o(i.HibernateGPIORetentionEnable))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWriteComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
</UL>

<P><STRONG><a name="[4b]"></a>HibernateRequest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hibernate.o(i.HibernateRequest))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWriteComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
</UL>

<P><STRONG><a name="[4c]"></a>HibernateWakeSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hibernate.o(i.HibernateWakeSet))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWriteComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
</UL>

<P><STRONG><a name="[49]"></a>HibernateWriteComplete</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hibernate.o(i.HibernateWriteComplete))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWakeSet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRequest
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateGPIORetentionEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateEnableExpClk
</UL>

<P><STRONG><a name="[41]"></a>I2CReadSlaveDac</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, i2c_comm.o(i.I2CReadSlaveDac))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2CReadSlaveDac
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateVoltage
</UL>

<P><STRONG><a name="[40]"></a>I2CWriteSlaveDac</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, i2c_comm.o(i.I2CWriteSlaveDac))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2CWriteSlaveDac
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateVoltage
</UL>

<P><STRONG><a name="[4d]"></a>InitDebugUart</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, uart_comm.o(i.InitDebugUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitDebugUart
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>InitGPRSModule</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gprs_comm.o(i.InitGPRSModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = InitGPRSModule &rArr; sendVoltageGPRS &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPRSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>InitGPRSUart</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uart_comm.o(i.InitGPRSUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitGPRSUart
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>InitSystemPeripherals</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, main.o(i.InitSystemPeripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = InitSystemPeripherals &rArr; ConfigureVoltageAdcModule &rArr; GPIOPinTypeADC
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTemperatureAdcModule
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureI2CModule
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>

<P><STRONG><a name="[5a]"></a>IntRegister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>

<P><STRONG><a name="[53]"></a>LcdInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.LcdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdInit &rArr; clearLcd &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudo_8bit_cmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>PSUStatusOnline</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, utils.o(i.PSUStatusOnline))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PSUStatusOnline &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyStop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2IntHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
</UL>

<P><STRONG><a name="[56]"></a>SendCommandInformation</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, commands.o(i.SendCommandInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendCommandInformation &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[19]"></a>StartTimer1A</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, timer_operations.o(i.StartTimer1A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StartTimer1A &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkWithTimer
</UL>

<P><STRONG><a name="[1a]"></a>StartTimer3A</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, timer_operations.o(i.StartTimer3A))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StartTimer3A &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkWithTimer
</UL>

<P><STRONG><a name="[20]"></a>SysCtlADCSpeedSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlADCSpeedSet))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureVoltageAdcModule
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureTemperatureAdcModule
</UL>

<P><STRONG><a name="[17]"></a>SysCtlClockGet</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkTransfer
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThinkMeter
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandInformation
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_reboot
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkWithTimer
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureI2CModule
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3IntHandler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2IntHandler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1IntHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPRSCommand
</UL>

<P><STRONG><a name="[39]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
</UL>

<P><STRONG><a name="[1c]"></a>SysCtlReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlReset))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_reboot
</UL>

<P><STRONG><a name="[58]"></a>SystemHybernate</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, commands.o(i.SystemHybernate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemHybernate &rArr; PSUStatusOnline &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateWakeSet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateRequest
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateGPIORetentionEnable
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HibernateEnableExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[59]"></a>ThinkMeter</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, utils.o(i.ThinkMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ThinkMeter &rArr; BlinkTransfer &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkTransfer
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[6]"></a>Timer1IntHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer_operations.o(i.Timer1IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Timer1IntHandler &rArr; PSUStatusOnline &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_rvmdk.o(RESET)
<LI> timer_operations.o(i.StartTimer1A)
</UL>
<P><STRONG><a name="[7]"></a>Timer2IntHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer_operations.o(i.Timer2IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Timer2IntHandler &rArr; PSUStatusOnline &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Timer3IntHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer_operations.o(i.Timer3IntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Timer3IntHandler &rArr; PSUStatusOnline &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_rvmdk.o(RESET)
<LI> timer_operations.o(i.StartTimer3A)
</UL>
<P><STRONG><a name="[3a]"></a>TimerConfigure</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
</UL>

<P><STRONG><a name="[29]"></a>TimerDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.TimerDisable))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableAllTimers
</UL>

<P><STRONG><a name="[3d]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
</UL>

<P><STRONG><a name="[57]"></a>TimerIntRegister</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.TimerIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer3A
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1A
</UL>

<P><STRONG><a name="[3b]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
</UL>

<P><STRONG><a name="[3c]"></a>TimerMatchSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerMatchSet))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
</UL>

<P><STRONG><a name="[37]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UARTCharGetNonBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntHandler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSUARTIntHandler
</UL>

<P><STRONG><a name="[5c]"></a>UARTCharPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(i.UARTCharPut))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGPRSSendBlocking
</UL>

<P><STRONG><a name="[5d]"></a>UARTGPRSSendBlocking</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart_comm.o(i.UARTGPRSSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTGPRSSendBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendGPRSCommand
</UL>

<P><STRONG><a name="[4]"></a>UARTIntHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_comm.o(i.UARTIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UARTIntHandler &rArr; BlinkTransfer &rArr; GPIOPinTypeGPIOOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGetNonBlocking
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UARTSendNoFIFOLimitation</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, uart_comm.o(i.UARTSendNoFIFOLimitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendOneByte
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHex
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandInformation
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyStop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
</UL>

<P><STRONG><a name="[5e]"></a>UARTSendOneByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_comm.o(i.UARTSendOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTSendOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
</UL>

<P><STRONG><a name="[5f]"></a>__0snprintf$1</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf1.o(i.__0snprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[73]"></a>__1snprintf$1</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf1.o(i.__0snprintf$1), UNUSED)

<P><STRONG><a name="[6b]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf1.o(i.__0snprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoltageGPRS
</UL>

<P><STRONG><a name="[74]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[75]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[67]"></a>checkModemData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gprs_comm.o(i.checkModemData))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>clearLcd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.clearLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clearLcd &rArr; cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDifferenceReading
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMessage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[55]"></a>cmd</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lcd.o(i.cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMessage
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[62]"></a>data</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lcd.o(i.data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string
</UL>

<P><STRONG><a name="[32]"></a>exp10</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utils.o(i.exp10))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToThousand
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStructurePWM
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillStructureI2C
</UL>

<P><STRONG><a name="[2f]"></a>lcdMessage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd.o(i.lcdMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcdMessage &rArr; string &rArr; data
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDifferenceReading
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; verifyComand &rArr; GenerateVoltage &rArr; FillStructureI2C &rArr; AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verifyComand
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMessage
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkModemData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPRSUart
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPRSModule
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebugUart
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseGPRSContainer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseContainer
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePwmPin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSystemPeripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[54]"></a>pseudo_8bit_cmd</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lcd.o(i.pseudo_8bit_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pseudo_8bit_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[4f]"></a>sendGPRSCommand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gprs_comm.o(i.sendGPRSCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sendGPRSCommand &rArr; UARTGPRSSendBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGPRSSendBlocking
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPRSModule
</UL>

<P><STRONG><a name="[50]"></a>sendVoltageGPRS</STRONG> (Thumb, 128 bytes, Stack size 120 bytes, gprs_comm.o(i.sendVoltageGPRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sendVoltageGPRS &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTGPRSSendBlocking
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGPRSModule
</UL>

<P><STRONG><a name="[63]"></a>string</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.string))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = string &rArr; data
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMessage
</UL>

<P><STRONG><a name="[66]"></a>verifyComand</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, commands.o(i.verifyComand))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = verifyComand &rArr; GenerateVoltage &rArr; FillStructureI2C &rArr; AsciiToHex &rArr; EmergencyStop &rArr; UARTSendNoFIFOLimitation &rArr; UARTSendOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSendNoFIFOLimitation
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThinkMeter
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUStatusOnline
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateVoltage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHybernate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandInformation
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcVoltage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeneratePWM
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmergencyStop
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableAllTimers
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_reboot
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkWithTimer
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMessage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_rvmdk.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rvmdk.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$1
</UL>

<P><STRONG><a name="[a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf1.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0snprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
